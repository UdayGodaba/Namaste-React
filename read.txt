L1

-> React is a JS Library that can be used in already existing project by just linking into a section we want to use.
-> Other frameworks does not provide this flexibility.

----------------------------------------------------------------------------------------------------------------------------------------------------------

L2

-> npm : It is a package manager used for javascript related development used for managing project dependencies.
-> Devdependecies are restricted to development where as dependencies are project needs in production also.

-> Caret (^): Allows patch and minor updates, not major. (^1.2.3 includes up to, but not 2.0.0)
-> Tilde (~): Allows patch-level updates only. (~1.2.3 includes up to, but not 1.3.0) 


-> package.json: Contains metadata about a project, including dependencies, scripts, and general configuration. It's manually edited and specifies the project's dependencies with version ranges.
-> package-lock.json: Automatically generated file that locks the specific version of each installed package. It ensures consistent installations across different environments and prevents unexpected version changes.
-> node_modules: Directory storing project dependencies.

----------------------------------------------------------------------------------------------------------------------------------------------------------

L3: JSX and Functional Components

-> React.createElement will create an object with specified HTML tag, attributes and children.
-> root = ReactDOM.createRoot(document.getElementById("root")) any changes inside react code will be visible on specified root.
-> root.render() is going to replace everything in the specified tag with the react element passed.
-> When the react element is rendered onto the DOM then it is converted to HTMLElement.

-> JSX is HTML like syntax.
-> JSX makes easier to write code instead of React.createElement.
-> JSX is not directly understood by JS Engine.
-> JSX is transpiled before it reaches the JS Engine and it is done by Babel package.
-> JSX --> React.createElement(JS object) --> HTMLElement(after rendered).
-> In JSX we use camelcase for writing attributes.
-> In case of multiple lines of JSX wrap inside brackets.
-> Inside JSX we can write JS within curly brackets.
-> One more super feature of JSX is it takes care of cross site scripting attacks.

-> Functional Component is a JS function returning some JSX.
-> Component name should start with capital case.
-> Inorder to render components wrap component inside <ComponentName />.
-> Component composition is nothing but writing a component inside other component or combining smaller reusable components.
-> We can club React element and components in anyway.

----------------------------------------------------------------------------------------------------------------------------------------------------------

L4: Props and how to use Functional components

-> Props are nothing but passing arguments to the function.
-> Props will be received as JS object and we can use object.propName or destructure and use them.

-> Config driven UI : Our website UI is driven by data.

----------------------------------------------------------------------------------------------------------------------------------------------------------

L5: Hooks, Virtual DOM

-> Two types of Export/Import

    -> Default Export/Import
        export default Component;
        import Component from "path";

    -> Named Export/Import
        export const Component;
        import { Component } from "path";

-> Hooks are normal JS utility functions which provides super powers.
-> React keeps UI layer in-sync with data layer. 

useState Hook:
    -> Normal variables on updation UI won't change in react.
    -> UseState Hook provides a super power state varaibles when they get updated UI also updated i.e the particular component re-renders.

-> Virtual DOM is a representation of an actual DOM as JS Object.

Reconciliation Algorithm(React Fiber):

    -> Doing anything on actual DOM is costly, so what react does is it maintains virtual DOM which is an JS Object.
    -> So compairing the previous and updated objects is faster and then it makes changes of what it needs to be done.
    -> So react does make out web app faster by efficiently doing DOM operations.

----------------------------------------------------------------------------------------------------------------------------------------------------------

L6: Hooks and rendering

Monolithic Architecture:

    Description: In a monolithic architecture, the entire application is developed, deployed, and scaled as a single, unified unit.
    Characteristics:

        -> Single codebase and code deployment.
        -> All components tightly integrated into a single executable.
        -> Scalability can be achieved by replicating the entire application.
        -> Changes or updates may require redeploying the entire application.

Microservices Architecture:

    Description: In a microservices architecture, the application is broken down into smaller, independent services that communicate with each other through APIs.

    Characteristics:
        -> Distributed architecture with separate services for different functionalities.
        -> Each service can be developed, deployed, and scaled independently.
        -> Services communicate via well-defined APIs.
        -> Easier to scale individual components.
        -> Changes or updates to one service don't necessarily require changes to others.

-> In two ways we can fetch required data from Api when page loads.

    -> Loads --> API call --> Render
    -> Loads --> Render whatever we can --> API call --> Render i.e populate with received data
    -> We prefer second way for better user experience.

useEffect Hook:

    -> If we want to execute something after the component is rendered then we place that piece of code in useEffect Hook.
    -> useEffect take two arguments first one is a callback function and second one is dependencies array.

-> One way to improve user experience is putting shimmer UI before something loads through API request i.e a rough skeletion page that resembles how the loaded page looks like.
-> We are rendering something based on rendering such concept is called Conditional Rendering.

----------------------------------------------------------------------------------------------------------------------------------------------------------

L7: Routes

useEffect Hook:
    
    -> If no dependency array then callback inside useEffect will be called everytime when component renders.
    -> If dependency array is empty then only for the first render of component the callback in useEffect will be called.
    -> If there are few dependencies in dependency array then with initial render it will also call callback whenever these dependencies changes.

-> Always use hooks inside functional component body.
-> Do not try to initialize a state variable with condition that will mess up the render cycle.

----------------------------------------------------------------------------------------------------------------------------------------------------------

L8: Class Components

-> Old way of writing react but still used in industry for older projects.
-> Similar to functional components class components also return JSX.

Constructor and super():
    
    -> In case of class components it is a class which has method render it will return JSX.
    -> In case of props it will be received within constructor and we need to pass it to super(props) inorder to use props with this keyword.
    -> The super keyword in JavaScript is mostly used to access properties on an object literal or class's [[Prototype]] or to invoke a superclass's constructor.
    -> Super() function is to call the constructor of the parent class. It is used when we need to access a few variables in the parent class. It returns an object which represents the parent class. 

State varaibles in class components:

    -> this.state is reserved for creating state variables and it is coded within constructor.
    -> this.state will be initialized with an object of state variables and their initial values.
    -> Never directly update state variables.
    -> this.setState() take an object how to update for specific state varaible and re-renders the component.

LifeCycle Methods:

    -> First constructor will be called, then render method is called, then if no child then it will be mounted and componentDidMount() will be called.
    -> componentDidMount() is used like useEffect because we want to make a API call after once initial render of component is done with whatever is possible then populate with fetched data to the component.
    
    Example:
        -> If we have a parent component and multiple children components with in same level then how does LifeCycle work?
        -> First the parent constructor and render are called as expected.
        -> Second all the children constructor and render are called because to optimize the renders since DOM operations are costly so React batches all the render cycles of children and atlast commit of all children are done at a time.
        -> In third phase all children are mounted then at last parent component is mounted.
    
    -> If an API call is made in componentDidMount() and we set the state based on fetched data then updating phase starts in which it calls render and updates DOM then makes a call to componentDidUpdate().
    -> When the component is about to unmount just before that componentWillUnmount() call is made.